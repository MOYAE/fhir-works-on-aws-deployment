#
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0
#

service: fhir-service-validator

custom:
  stage: ${opt:stage, self:provider.stage}
  fhirVersion: ${opt:fhirVersion, '4.0.1'}
  region: ${opt:region, self:provider.region}

provider:
  name: aws
  region: us-west-2
  stage: dev
  runtime: java11
  logRetentionInDays: 3653 # 10 years
  stackTags:
    FHIR_SERVICE: 'fhir-service-validator-${self:custom.region}-${self:custom.stage}'
  tracing:
    lambda: true
  environment:
    FHIR_VERSION:
      !Ref FhirVersion
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:CreateBucket"
        - "s3:ListBucket"
        - "s3:ListObjects"
      Resource: 
        - !Join ['', ['arn:aws:s3:::', !Ref ImplementationGuidesBucket, '/*']]
        - !Join ['', ['arn:aws:s3:::', !Ref ImplementationGuidesBucket]]

package:
  artifact: target/fwoa-hapi-validator-dev.jar

functions:
  validator:
    handler: software.amazon.fwoa.Handler
    timeout: 25
    memorySize: 2048
    provisionedConcurrency: 5
    environment:
      IMPLEMENTATION_GUIDES_BUCKET: !Ref ImplementationGuidesBucket

  uploadImplementationGuides:
    timeout: 30
    memorySize: 2048
    handler: software.amazon.fwoa.UploadIGs
    description: 'Upload implementation guides to s3'
    role: UploadImplementationGuidesLambdaRole
    disableLogs: true # needed to avoid race condition error "Resource of type 'AWS::Logs::LogGroup' already exists" since the custom resource lambda invocation may create the log group before CFN does
    environment:
      IMPLEMENTATION_GUIDES_BUCKET: !Ref ImplementationGuidesBucket

resources:
  - Parameters:
      Stage:
        Type: String
        Default: ${self:custom.stage}
        Description: 'The deployment stage (e.g. dev, qa, prod). Default: dev'
      FhirVersion:
        Type: String
        Default: ${self:custom.fhirVersion}
        AllowedValues:
          - '4.0.1'
          - '3.0.1'
        Description: 'The FHIR version used by the validator. Default: 4.0.1'
  - Outputs:
      ValidatorLambdaAlias:
        Description: Validator lambda function alias
        Value: !Ref ValidatorProvConcLambdaAlias # serverless by convention capitalizes first letter and suffixes with "ProvConcLambdaAlias"
        Export:
          Name: !Join ['-', ['fhir-service-validator-lambda', !Ref Stage]]
  - Resources:
      ImplementationGuidesBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketEncryption:
            ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: AES256
          PublicAccessBlockConfiguration:
            BlockPublicAcls: true
            BlockPublicPolicy: true
            IgnorePublicAcls: true
            RestrictPublicBuckets: true
      ImplementationGuidesBucketHttpsOnlyPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: !Ref ImplementationGuidesBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowSSLRequestsOnly
                Effect: Deny
                Principal: '*'
                Action:
                  - s3:*
                Resource:
                  - !GetAtt ImplementationGuidesBucket.Arn
                  - !Join ['', [!GetAtt ImplementationGuidesBucket.Arn, '/*']]
                Condition:
                  Bool:
                    'aws:SecureTransport': false
      UploadImplementationGuidesCustomResource:
        Type: AWS::CloudFormation::CustomResource
        Properties:
          ServiceToken: !GetAtt UploadImplementationGuidesLambdaFunction.Arn # serverless by convention capitalizes first letter and suffixes with "LambdaFunction"
          RandomValue: ${sls:instanceId} # This forces the upload to happen on every deployment
          BucketName: !Ref ImplementationGuidesBucket
      UploadImplementationGuidesLambdaRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - sts:AssumeRole
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
          Policies:
            - PolicyName: s3Access
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - "s3:PutObject"
                      - "s3:GetObject"
                      - "s3:CreateBucket"
                      - "s3:ListBucket"
                      - "s3:ListObjects"
                    Resource:
                      - !Join ['', ['arn:aws:s3:::', !Ref ImplementationGuidesBucket, '/*']]
                      - !Join ['', ['arn:aws:s3:::', !Ref ImplementationGuidesBucket]]