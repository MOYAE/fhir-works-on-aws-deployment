/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

package software.amazon.fwoa;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import java.util.ArrayList;
import java.util.List;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.Bucket;
import com.amazonaws.services.s3.model.ListObjectsV2Result;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import com.amazonaws.services.s3.model.S3ObjectSummary;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class Handler implements RequestHandler<String, ValidatorResponse> {

    private final Validator validator;

    public Handler() {
        log.info("Creating the Validator instance for the first time...");

        String fhirVersion = System.getenv("FHIR_VERSION");
        if (fhirVersion == null){
            fhirVersion = Validator.FHIR_R4;
        }
        String region = System.getenv("REGION");
        if (region == null) {
            region = "us-west-2";
        }
        final AmazonS3 s3 = AmazonS3ClientBuilder.standard().withRegion(Regions.fromName(region)).build();
        String bucketName = getIGBucketName(s3.listBuckets());
        if (bucketName.isEmpty()) {
            throw new Error("Unable to find S3 bucket for implementation guides.");
        }
        List<String> objectKeys = getBucketObjects(s3, bucketName, region);
        String guidesDirectory = downloadObjects(s3, bucketName, objectKeys);
        validator = new Validator(fhirVersion, guidesDirectory);

        log.info("Validating once to force the loading of all the validator related classes");
        // Validating a complex Patient yields better results. validating a trivial "empty" Patient won't load all the validation classes.
        String someSyntheaPatient = "{\"resourceType\":\"Patient\",\"id\":\"a8bc0c9f-47b3-ee31-60c6-fb8ce8077ac7\",\"text\":{\"status\":\"generated\",\"div\":\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Generated by <a href=\\\"https://github.com/synthetichealth/synthea\\\">Synthea</a>.Version identifier: master-branch-latest-2-gfd2217b\\n .   Person seed: -5969330820059413579  Population seed: 1614314878171</div>\"},\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName\",\"valueString\":\"Son314 Vandervort697\"},{\"url\":\"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",\"valueAddress\":{\"city\":\"New Bedford\",\"state\":\"Massachusetts\",\"country\":\"US\"}},{\"url\":\"http://synthetichealth.github.io/synthea/disability-adjusted-life-years\",\"valueDecimal\":1.1872597438165626},{\"url\":\"http://synthetichealth.github.io/synthea/quality-adjusted-life-years\",\"valueDecimal\":70.81274025618343}],\"identifier\":[{\"system\":\"https://github.com/synthetichealth/synthea\",\"value\":\"a8bc0c9f-47b3-ee31-60c6-fb8ce8077ac7\"},{\"type\":{\"coding\":[{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"MR\",\"display\":\"Medical Record Number\"}],\"text\":\"Medical Record Number\"},\"system\":\"http://hospital.smarthealthit.org\",\"value\":\"a8bc0c9f-47b3-ee31-60c6-fb8ce8077ac7\"},{\"type\":{\"coding\":[{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"SS\",\"display\":\"Social Security Number\"}],\"text\":\"Social Security Number\"},\"system\":\"http://hl7.org/fhir/sid/us-ssn\",\"value\":\"999-49-6778\"},{\"type\":{\"coding\":[{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"DL\",\"display\":\"Driver's License\"}],\"text\":\"Driver's License\"},\"system\":\"urn:oid:2.16.840.1.113883.4.3.25\",\"value\":\"S99922723\"},{\"type\":{\"coding\":[{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"PPN\",\"display\":\"Passport Number\"}],\"text\":\"Passport Number\"},\"system\":\"http://standardhealthrecord.org/fhir/StructureDefinition/passportNumber\",\"value\":\"X72123203X\"}],\"name\":[{\"use\":\"official\",\"family\":\"Beier427\",\"given\":[\"Minnie888\"],\"prefix\":[\"Mrs.\"]},{\"use\":\"maiden\",\"family\":\"Jaskolski867\",\"given\":[\"Minnie888\"],\"prefix\":[\"Mrs.\"]}],\"telecom\":[{\"system\":\"phone\",\"value\":\"555-390-9260\",\"use\":\"home\"}],\"gender\":\"female\",\"birthDate\":\"1949-01-01\",\"address\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/geolocation\",\"extension\":[{\"url\":\"latitude\",\"valueDecimal\":41.83492774608349},{\"url\":\"longitude\",\"valueDecimal\":-70.58336455010793}]}],\"line\":[\"862 Sauer Station Suite 31\"],\"city\":\"Plymouth\",\"state\":\"Massachusetts\",\"country\":\"US\"}],\"maritalStatus\":{\"coding\":[{\"system\":\"http://terminology.hl7.org/CodeSystem/v3-MaritalStatus\",\"code\":\"M\",\"display\":\"M\"}],\"text\":\"M\"},\"multipleBirthInteger\":3,\"communication\":[{\"language\":{\"coding\":[{\"system\":\"urn:ietf:bcp:47\",\"code\":\"en-US\",\"display\":\"English\"}],\"text\":\"English\"}}]}";
        validator.validate(someSyntheaPatient);
        log.info("Validator is ready");
    }

    @Override
    public ValidatorResponse handleRequest(String event, Context context) {
        ValidatorResponse validate = validator.validate(event);
        return validate;

    }

    private List<String> getBucketObjects(AmazonS3 s3, String bucketName, String regionString) {

        ListObjectsV2Result result = s3.listObjectsV2(bucketName);
        List<S3ObjectSummary> objects = result.getObjectSummaries();
        List<String> objectKeys = new ArrayList<String>();
        for (S3ObjectSummary os : objects) {
            objectKeys.add(os.getKey());
        }
        return objectKeys;
    }

    private String getIGBucketName(List<Bucket> buckets) {
        for (int i = 0; i < buckets.size(); i += 1) {
            if (buckets.get(i).getName().contains("fhirimplementationguides")) {
                return buckets.get(i).getName();
            }
        }
        return "";
    }

    private String downloadObjects(AmazonS3 s3, String bucketName, List<String> keys) {
        // create a directory to pass into the validator constructor in /tmp
        String tmpDir = System.getProperty("java.io.tmpdir");
        Path tmpDirPath = Paths.get(tmpDir + "/implementationGuides");
        try {
            Path igLocation = Files.createDirectory(tmpDirPath);
            for (int i = 0; i < keys.size(); i += 1) {
                S3Object guide = s3.getObject(bucketName, keys.get(i));
                S3ObjectInputStream inputStream = guide.getObjectContent();
                FileOutputStream outputStream = new FileOutputStream(new File(igLocation.toAbsolutePath().toString() + "/" + keys.get(i)));
                byte[] buffer = new byte[1024];
                int length = 0;
                while ((length = inputStream.read(buffer)) > 0) {
                    outputStream.write(buffer, 0, length);
                }
                inputStream.close();
                outputStream.close();
            }
            return igLocation.toAbsolutePath().toString();
        } catch (IOException e) {
            throw new Error(e.getMessage());
        } catch (AmazonServiceException e) {
            throw new Error(e.getErrorMessage());
        }
    }
}
